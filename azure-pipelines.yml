# SonarScanner for .NET
# Build, QA, Deploy

schedules:
  # Run from Monday to Friday at 2:0 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
  - cron: "0 2 * * 1-5"
    displayName: Nightly build
    branches:
      include:
        - master
        - branch-*
    always: true

trigger:
  - master
  - branch-*

pool: .net-bubble-aws-re-team-prod

variables:
  - group: sonarsource-build-variables
  - group: sonar-scanner-dotnet-variables
  - group: artifactory_access
  - group: digicert-keylocker
  # ARTIFACTORY_URL https://repox.jfrog.io/repox => https://repox.jfrog.io/artifactory
  # JFROG_URL https://repox.jfrog.io
  # https://github.com/SonarSource/parent-oss/blob/master/pom.xml#L708-L711
  - name: ARTIFACTORY_DEPLOY_USERNAME
    value: $[variables.ARTIFACTORY_QA_DEPLOYER_USERNAME]
  - name: ARTIFACTORY_QA_READER_USERNAME
    value: $[variables.ARTIFACTORY_PRIVATE_READER_USERNAME]
  # pipelines-yaml-templates/promote-stage.yml line 56
  - name: IS_RELEASE_BRANCH
    value: true
  - name: BUILD_CONFIGURATION
    value: "Release"
  - name: BUILD_PLATFORM
    value: "Any CPU"
  - name: SOLUTION
    value: "SonarScanner.MSBuild.sln"
  - name: NUGET_VERSION
    value: "6.10.1"

stages:
  - stage: build
    displayName: 'Build:'
    jobs:
      - job: build
        displayName: 'Build and stage to repox'
        workspace:
          clean: all
        variables:
          MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
          MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
          commonMavenArguments: -B -Pdeploy-sonarsource -Dmaven.test.skip=true
        steps:
          - checkout: self

          - task: NuGetToolInstaller@1
            displayName: "Install NuGet"
            inputs:
              versionSpec: $(NUGET_VERSION)

          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
              key: maven | pom.xml
              path: $(MAVEN_CACHE_FOLDER)

          - task: DownloadSecureFile@1
            name: snk
            inputs:
              secureFile: 'SonarSourceSecret.snk'
            displayName: 'Download snk'
            condition: eq(variables.IS_RELEASE_BRANCH, 'true')

          - task: DownloadSecureFile@1
            # This file is used by the "DigiCert Signing Manager KSP" Key Storage Provider to authenticate against the DigiCert private key provider server.
            name: SM_CLIENT_CERT
            displayName: Download p12 file
            inputs:
              secureFile: digicert_authentication_certificate.p12
            condition: eq(variables.IS_RELEASE_BRANCH, 'true')

          - task: DownloadSecureFile@1
            # This file contains the signing certificate without the private key. The private key will be downloaded later, during the signing process.
            displayName: 'Download crt file'
            name: SM_CLIENT_CRT
            inputs:
              secureFile: cert_525594307.crt
            condition: eq(variables.IS_RELEASE_BRANCH, 'true')

          # Initialize the DigiCert Private Key Provider.
          # What we think it does: The smctl tool authenticates with a client certificate (SM_CLIENT_CERT_FILE) and a client password (SM_CLIENT_CERT_PASSWORD).
          # It uses an API Key (SM_API_KEY) and the ID of the certificate (SM_CERT) to check if the authenticated client is authorized to use the
          # certificate specified and synchronize (potentially private) information about the certificate.
          - powershell: |
              Write-Output "smctl sync:"
              smctl windows certsync
            displayName: Synchronize certificates
            condition: eq(variables.IS_RELEASE_BRANCH, 'true')
            env:
              SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT.secureFilePath)
              SM_CLIENT_CERT_PASSWORD: $(SM_CLIENT_CERT_PASSWORD)
              SM_API_KEY: $(SM_API_KEY)
              SM_CERT: $(SM_CERT)

          - powershell: .\scripts\promote-project-version.ps1
            displayName: 'Promote project version'

          - task: VSBuild@1
            displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azdo pipeline variables'
            inputs:
              solution: 'scripts\version\ChangeVersion.proj'
              msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId)  /p:BuildConfiguration=$(BUILD_CONFIGURATION)'

          - task: DotNetCoreCLI@2
            displayName: Dotnet restore $(SOLUTION)
            env:
              ARTIFACTORY_USER: $(ARTIFACTORY_PRIVATE_READER_USERNAME)
              ARTIFACTORY_PASSWORD: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              command: 'restore'
              projects: '$(SOLUTION)'
              feedsToUse: 'config'
              restoreArguments: --locked-mode
              nugetConfigPath: 'NuGet.Config'
              verbosityRestore: 'normal'  # Default is noisy 'Detailed'

          - task: DotNetCoreCLI@2
            displayName: Dotnet generate SBOM
            # https://sonarsource.atlassian.net/browse/BUILD-1303
            inputs:
              command: custom
              custom: CycloneDX
              projects: '$(SOLUTION)'
              arguments: '-t -j -o build'

          - task: DotNetCoreCLI@2
            env:
              SignAssembly: $(IS_RELEASE_BRANCH)
            condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'true'))
            displayName: 'Build and prepare signing $(SOLUTION)'
            inputs:
              command: 'build'
              projects: '$(SOLUTION)'
              arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BUILD_CONFIGURATION) /p:platform="$(BUILD_PLATFORM)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'

          - task: DotNetCoreCLI@2
            condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'false')) # This should run only on PRs (master and other release branches need signing)
            displayName: 'Build $(SOLUTION)'
            inputs:
              command: 'build'
              projects: '$(SOLUTION)'
              arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BUILD_CONFIGURATION) /p:platform="$(BUILD_PLATFORM)"'

          - task: PowerShell@2
            displayName: 'Sign and package scanner files'
            env:
              SM_CLIENT_CRT_FILE: $(SM_CLIENT_CRT.secureFilePath)
              SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT.secureFilePath)
              SM_CLIENT_CERT_PASSWORD: $(SM_CLIENT_CERT_PASSWORD)
              SM_API_KEY: $(SM_API_KEY)
              SM_CERT: $(SM_CERT)
            inputs:
              targetType: 'inline'
              script: |
                . (Join-Path "scripts" "package-artifacts.ps1")
                . (Join-Path "scripts" "variables.ps1")

                Download-ScannerCli

                $signAssemblies = [System.Convert]::ToBoolean("$(IS_RELEASE_BRANCH)") # the variable is a string, we need a boolean
                Package-NetFrameworkScanner -SignAssemblies $signAssemblies
                Package-NetScanner -SignAssemblies $signAssemblies

          - task: PublishPipelineArtifact@1
            displayName: 'Publish packages as artifacts'
            inputs:
              targetPath: 'build'
              artifact: 'build'
