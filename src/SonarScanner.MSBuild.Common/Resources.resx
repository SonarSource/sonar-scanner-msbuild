<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MSG_BeginningRetry" xml:space="preserve">
    <value>Commencing retry-able operation. Max wait (milliseconds): {0}, pause between tries (milliseconds): {1}</value>
  </data>
  <data name="MSG_ExecutingFile" xml:space="preserve">
    <value>Executing file {0}
  Args: {1}
  Working directory: {2}
  Timeout (ms):{3}
  Process id: {4}</value>
  </data>
  <data name="MSG_ExecutionExitCode" xml:space="preserve">
    <value>Process returned exit code {0}</value>
  </data>
  <data name="WARN_ExecutionTimedOutKilled" xml:space="preserve">
    <value>Timed out after waiting {0} ms for process {1} to complete: it has been terminated, but its child processes may still be running.</value>
  </data>
  <data name="MSG_RetryingOperation" xml:space="preserve">
    <value>Retrying...</value>
  </data>
  <data name="MSG_RetryOperationFailed" xml:space="preserve">
    <value>Operation timed out, Elapsed time (ms): {0}</value>
  </data>
  <data name="MSG_RetryOperationSucceeded" xml:space="preserve">
    <value>Operation succeeded. Elapsed time (ms): {0}</value>
  </data>
  <data name="Logger_WarningPrefix" xml:space="preserve">
    <value>WARNING: </value>
  </data>
  <data name="MSG_CreatingDirectory" xml:space="preserve">
    <value>Creating directory: {0}</value>
  </data>
  <data name="MSG_DeletingDirectory" xml:space="preserve">
    <value>Removing the existing directory: {0}</value>
  </data>
  <data name="MSG_DirectoryAlreadyExists" xml:space="preserve">
    <value>The directory already exists: {0}</value>
  </data>
  <data name="ERROR_CmdLine_DuplicateArg" xml:space="preserve">
    <value>A value has already been supplied for this argument: {0}. Existing: '{1}'</value>
  </data>
  <data name="ERROR_CmdLine_MissingRequiredArgument" xml:space="preserve">
    <value>A required argument is missing: {0}</value>
  </data>
  <data name="ERROR_CmdLine_UnrecognizedArg" xml:space="preserve">
    <value>Unrecognized command line argument: {0}</value>
  </data>
  <data name="MSG_Runner_OverwritingEnvVar" xml:space="preserve">
    <value>Overwriting the value of environment variable '{0}'. Old value: {1}, new value: {2}</value>
  </data>
  <data name="MSG_Runner_SettingEnvVar" xml:space="preserve">
    <value>Setting environment variable '{0}'. Value: {1}</value>
  </data>
  <data name="CmdLine_ArgDescription_PropertiesFilePath" xml:space="preserve">
    <value>[/s:{full path to the analysis settings file}]</value>
  </data>
  <data name="MSG_Properties_DefaultPropertiesFileFound" xml:space="preserve">
    <value>Default properties file was found at {0}</value>
  </data>
  <data name="MSG_Properties_DefaultPropertiesFileNotFound" xml:space="preserve">
    <value>Default properties file was not found at {0}</value>
  </data>
  <data name="MSG_Properties_LoadingPropertiesFromFile" xml:space="preserve">
    <value>Loading analysis properties from {0}</value>
  </data>
  <data name="ERROR_Properties_GlobalPropertiesFileDoesNotExist" xml:space="preserve">
    <value>Unable to find the analysis settings file '{0}'. Please fix the path to this settings file.</value>
  </data>
  <data name="ERROR_Properties_InvalidPropertiesFile" xml:space="preserve">
    <value>Unable to read the analysis settings file '{0}'. Please fix the content of this file.</value>
  </data>
  <data name="CmdLine_ArgDescription_DynamicProperty" xml:space="preserve">
    <value>/d:[key]=[value]</value>
  </data>
  <data name="ERROR_CmdLine_CannotSetPropertyOnCommandLine" xml:space="preserve">
    <value>The property '{0}' is automatically set by the SonarScanner for .NET and cannot be overridden on the command line.</value>
  </data>
  <data name="ERROR_CmdLine_DuplicateProperty" xml:space="preserve">
    <value>A value has already been supplied for this property. Key: {0}, existing value: {1}</value>
  </data>
  <data name="ERROR_CmdLine_InvalidAnalysisProperty" xml:space="preserve">
    <value>The format of the analysis property {0} is invalid</value>
  </data>
  <data name="ERROR_CmdLine_MustUseProjectKey" xml:space="preserve">
    <value>Please use the parameter prefix '/k:' to define the key of the project instead of injecting this key with the help of the 'sonar.projectKey' property.</value>
  </data>
  <data name="ERROR_CmdLine_MustUseProjectName" xml:space="preserve">
    <value>Please use the parameter prefix '/n:' to define the name of the project instead of injecting this name with the help of the 'sonar.projectName' property.</value>
  </data>
  <data name="ERROR_CmdLine_MustUseProjectVersion" xml:space="preserve">
    <value>Please use the parameter prefix '/v:' to define the version of the project instead of injecting this version with the help of the 'sonar.projectVersion' property.</value>
  </data>
  <data name="ERROR_Parser_UniqueDescriptorIds" xml:space="preserve">
    <value>Descriptor ids must be unique</value>
  </data>
  <data name="ERROR_ProcessRunner_ExeNotFound" xml:space="preserve">
    <value>Execution failed. The specified executable does not exist: {0}</value>
  </data>
  <data name="ERROR_ConnectionFailed" xml:space="preserve">
    <value>Could not connect to the SonarQube server. Check that the URL is correct and that the server is available. URL: {0}</value>
  </data>
  <data name="ERROR_UrlNameResolutionFailed" xml:space="preserve">
    <value>The name of the SonarQube server could not be resolved. Check the url is correct and that the server is available. Url: {0}</value>
  </data>
  <data name="ERROR_CannotCreateEmptyDirectory" xml:space="preserve">
    <value>Failed to create an empty directory '{0}'. Please check that there are no open or read-only files in the directory and that you have the necessary read/write permissions.
  Detailed error message: {1}</value>
  </data>
  <data name="MSG_CmdLine_SensitiveCmdLineArgsAlternativeText" xml:space="preserve">
    <value>&lt;sensitive data removed&gt;</value>
  </data>
  <data name="WARN_InvalidTimeoutValue" xml:space="preserve">
    <value>The specified value `{0}` for `{1}` cannot be parsed. The default value of {2}s will be used. Please remove the parameter or specify the value in seconds, greater than 0.</value>
  </data>
  <data name="WARN_SonarVerboseNotBool" xml:space="preserve">
    <value>Expecting the sonar.verbose property to be set to either 'true' or 'false' (case-sensitive) but it was set to '{0}'.</value>
  </data>
  <data name="MSG_SonarLogLevelWasSpecified" xml:space="preserve">
    <value>sonar.log.level={0} was specified - setting the log verbosity to 'DEBUG'</value>
  </data>
  <data name="MSG_SonarVerboseWasSpecified" xml:space="preserve">
    <value>sonar.verbose={0} was specified - setting the log verbosity to '{1}'</value>
  </data>
  <data name="ERROR_FileNotFound" xml:space="preserve">
    <value>Could not find a file on the SonarQube server. URL: {0}</value>
  </data>
  <data name="ERROR_SettingsFileNotFound" xml:space="preserve">
    <value>The settings file could not be found</value>
  </data>
  <data name="ERROR_TrustFailure" xml:space="preserve">
    <value>A server certificate could not be validated. Possible cause: you are using a self-signed SSL certificate but the certificate has not been installed on the client machine. Please make sure that you can access {0} without encountering certificate errors.</value>
  </data>
  <data name="WARN_ExecutionTimedOutNotKilled" xml:space="preserve">
    <value>Timed out after waiting {0} ms for process {1} to complete: it could not be terminated and might still be running.</value>
  </data>
  <data name="ERROR_UnauthorizedConnection" xml:space="preserve">
    <value>Could not authorize while connecting to the SonarQube server. Check your credentials and try again.</value>
  </data>
  <data name="ERROR_FailedParsePropertiesEnvVar" xml:space="preserve">
    <value>Failed to parse properties from the environment variable '{0}' because '{1}'.</value>
  </data>
  <data name="ERROR_InvalidPropertyName" xml:space="preserve">
    <value>At least one property name is missing. Please check that the settings file is valid.</value>
  </data>
  <data name="ERROR_CmdLine_MustUseOrganization" xml:space="preserve">
    <value>Please use the parameter prefix '/o:' to define the organization of the project instead of injecting this organization with the help of the 'sonar.organization' property.</value>
  </data>
  <data name="WARN_FailedToReadFile" xml:space="preserve">
    <value>Cannot detect the operating system. {0}</value>
  </data>
  <data name="MSG_AnalysisFileCouldNotBeAdded" xml:space="preserve">
    <value>Could not add '{0}' to the analysis. {1}</value>
  </data>
  <data name="MSG_CouldNotImportTruststoreWithDefaultPassword" xml:space="preserve">
    <value>Could not import the truststore '{0}' with the default password at index {1}. Reason: {2}</value>
  </data>
  <data name="WARN_HostUrlAndSonarcloudUrlSet" xml:space="preserve">
    <value>The arguments 'sonar.host.url' and 'sonar.scanner.sonarcloudUrl' are both set. Please set only 'sonar.scanner.sonarcloudUrl'.</value>
  </data>
  <data name="WARN_RegionIsOverriden" xml:space="preserve">
    <value>The {0} parameter is set to "{1}". The setting will be overriden by one or more of the properties {2}, {3}, or {4}.</value>
  </data>
  <data name="ERR_HostUrlAndSonarcloudUrlAreEmpty" xml:space="preserve">
    <value>The arguments 'sonar.host.url' and 'sonar.scanner.sonarcloudUrl' are both set to an invalid value.</value>
  </data>
  <data name="ERR_HostUrlDiffersFromSonarcloudUrl" xml:space="preserve">
    <value>The arguments 'sonar.host.url' and 'sonar.scanner.sonarcloudUrl' are both set and are different. Please set either 'sonar.host.url' for SonarQube or 'sonar.scanner.sonarcloudUrl' for SonarCloud.</value>
  </data>
  <data name="MSG_ServerInfo_ApiUrlDetected" xml:space="preserve">
    <value>Api Url: {0}</value>
  </data>
  <data name="MSG_ServerInfo_IsSonarCloudDetected" xml:space="preserve">
    <value>Is SonarCloud: {0}</value>
  </data>
  <data name="MSG_ServerInfo_ServerUrlDetected" xml:space="preserve">
    <value>Server Url: {0}</value>
  </data>
  <data name="ERROR_UnsupportedRegion" xml:space="preserve">
    <value>Unsupported region '{0}'. List of supported regions: 'us'. Please check the 'sonar.region' property.</value>
  </data>
</root>