/*
 * SonarScanner for .NET
 * Copyright (C) 2016-2025 SonarSource SA
 * mailto: info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using System;
using System.Collections.Generic;
using SonarScanner.MSBuild.Common;
using SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing.Processors;

namespace SonarScanner.MSBuild.PreProcessor.AnalysisConfigProcessing;

public static class AnalysisConfigGenerator
{
    /// <summary>
    /// Combines the various configuration options into the AnalysisConfig file used by the build and post-processor. Saves the file and returns the config instance.
    /// </summary>
    /// <param name="localSettings">Processed local settings, including command line arguments supplied the user.</param>
    /// <param name="buildSettings">Build environment settings.</param>
    /// <param name="additionalSettings">Additional settings generated by this Scanner. Can be empty.</param>
    /// <param name="serverProperties">Analysis properties downloaded from the SonarQube server.</param>
    /// <param name="analyzersSettings">Specifies the Roslyn analyzers to use. Can be empty.</param>
    /// <param name="sonarQubeVersion">SonarQube/SonarCloud server version.</param>
    /// <param name="resolvedJavaExePath">Java exe path calculated from IJreResolver.</param>
    public static AnalysisConfig GenerateFile(ProcessedArgs localSettings,
                                              BuildSettings buildSettings,
                                              Dictionary<string, string> additionalSettings,
                                              IDictionary<string, string> serverProperties,
                                              List<AnalyzerSettings> analyzersSettings,
                                              string sonarQubeVersion,
                                              string resolvedJavaExePath)
    {
        _ = localSettings ?? throw new ArgumentNullException(nameof(localSettings));
        _ = buildSettings ?? throw new ArgumentNullException(nameof(buildSettings));
        _ = additionalSettings ?? throw new ArgumentNullException(nameof(additionalSettings));
        _ = serverProperties ?? throw new ArgumentNullException(nameof(serverProperties));
        _ = analyzersSettings ?? throw new ArgumentNullException(nameof(analyzersSettings));
        var config = new AnalysisConfig
        {
            SonarConfigDir = buildSettings.SonarConfigDirectory,
            SonarOutputDir = buildSettings.SonarOutputDirectory,
            SonarBinDir = buildSettings.SonarBinDirectory,
            SonarScannerWorkingDirectory = buildSettings.SonarScannerWorkingDirectory,
            SourcesDirectory = buildSettings.SourcesDirectory,
            JavaExePath = string.IsNullOrWhiteSpace(localSettings.JavaExePath) ? resolvedJavaExePath : localSettings.JavaExePath, // the user-specified JRE overrides the resolved value
            ScanAllAnalysis = localSettings.ScanAllAnalysis,
            HasBeginStepCommandLineCredentials = localSettings.CmdLineProperties.HasProperty(SonarProperties.SonarUserName)
                                                 || localSettings.CmdLineProperties.HasProperty(SonarProperties.SonarToken),
            SonarQubeHostUrl = localSettings.ServerInfo.ServerUrl,
            SonarQubeVersion = sonarQubeVersion,
            SonarProjectKey = localSettings.ProjectKey,
            SonarProjectVersion = localSettings.ProjectVersion,
            SonarProjectName = localSettings.ProjectName,
            ServerSettings = [],
            LocalSettings = [],
            AnalyzersSettings = analyzersSettings
        };
        foreach (var processor in CreateProcessors(buildSettings, localSettings, additionalSettings, serverProperties))
        {
            processor.Update(config);
        }
        config.Save(buildSettings.AnalysisConfigFilePath);
        return config;
    }

    private static IEnumerable<IAnalysisConfigProcessor> CreateProcessors(BuildSettings buildSettings,
                                                                          ProcessedArgs localSettings,
                                                                          Dictionary<string, string> additionalSettings,
                                                                          IDictionary<string, string> serverProperties) =>
    [
        new InitializationProcessor(buildSettings, localSettings, additionalSettings, serverProperties), // this must be first
        new CoverageExclusionsProcessor(localSettings, serverProperties),
        new AnalysisScopeProcessor(localSettings, serverProperties),
        new PropertyMappingProcessor(localSettings, serverProperties),
    ];
}
