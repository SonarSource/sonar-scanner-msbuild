<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CONV_DIAG_ConvertCoverageFile" xml:space="preserve">
    <value>Converting coverage file '{0}' to '{1}'.</value>
  </data>
  <data name="CONV_ERROR_ConversionToolFailed" xml:space="preserve">
    <value>Failed to convert the binary code coverage reports to XML. No code coverage information will be uploaded to the server (SonarQube/SonarCloud).
Check that the downloaded code coverage file ({0}) is valid by opening it in Visual Studio. If it is not, check that the internet security settings on the build machine allow files to be downloaded from the Team Foundation Server machine.</value>
  </data>
  <data name="CONV_ERROR_InputFileNotFound" xml:space="preserve">
    <value>The binary coverage file {0} could not be found. No coverage information will be uploaded to the Sonar server.</value>
  </data>
  <data name="COVXML_DIAG_FileAlreadyExist_NoConversionAttempted" xml:space="preserve">
    <value>Found corresponding Binary-to-XML conversion output file for {0}, no conversion will be attempted.</value>
  </data>
  <data name="COVXML_DIAG_SkippingCoverageCheckPropertyProvided" xml:space="preserve">
    <value>Property 'sonar.cs.vscoveragexml.reportsPaths' provided, skipping the search for coveragexml file in default folders...</value>
  </data>
  <data name="EX_CoverageReportProcessorNotInitialized" xml:space="preserve">
    <value>The Coverage Report Processor was not initialized before use.</value>
  </data>
  <data name="PROC_DIAG_FetchingCoverageReportInfoFromServer" xml:space="preserve">
    <value>Fetching code coverage report information from TFS...</value>
  </data>
  <data name="Report_AnalysisFailed" xml:space="preserve">
    <value>Analysis failed for SonarQube project {0}</value>
  </data>
  <data name="Report_AnalysisSucceeded" xml:space="preserve">
    <value>Analysis succeeded for SonarQube project {0} [(Analysis results)] ({1})</value>
  </data>
  <data name="Report_InvalidSkippedAndExcludedMessage" xml:space="preserve">
    <value>  Invalid projects: {0}, skipped projects: {1}, excluded projects: {2}</value>
  </data>
  <data name="Report_ProductAndTestMessage" xml:space="preserve">
    <value>  Product projects: {0}, test projects: {1}</value>
  </data>
  <data name="Report_SonarQubeProjectDescription" xml:space="preserve">
    <value>"{0}", version {2}</value>
  </data>
  <data name="Report_UpdatingTeamBuildSummary" xml:space="preserve">
    <value>Updating the TeamBuild summary...</value>
  </data>
  <data name="TRX_DIAG_AbsoluteTrxPath" xml:space="preserve">
    <value>Absolute path to coverage file: {0}</value>
  </data>
  <data name="TRX_DIAG_CodeCoverageAttachmentsFound" xml:space="preserve">
    <value>The following code coverage attachments were found from the trx files: {0}</value>
  </data>
  <data name="TRX_DIAG_FolderPaths" xml:space="preserve">
    <value>Looking for TRX files in: {0}</value>
  </data>
  <data name="TRX_DIAG_LocatingTrx" xml:space="preserve">
    <value>Attempting to locate a test results (.trx) file...</value>
  </data>
  <data name="TRX_DIAG_NoCodeCoverageInfo" xml:space="preserve">
    <value>No code coverage attachments were found from the trx files.</value>
  </data>
  <data name="TRX_DIAG_NoTestResultsFound" xml:space="preserve">
    <value>No test results files found</value>
  </data>
  <data name="TRX_DIAG_SkippingCoverageCheckPropertyProvided" xml:space="preserve">
    <value>Property 'sonar.cs.vstest.reportsPaths' provided, skipping the search for TRX files in default folders...</value>
  </data>
  <data name="TRX_DIAG_TestResultsDirectoryNotFound" xml:space="preserve">
    <value>Test results directory does not exist in {0}</value>
  </data>
  <data name="TRX_DIAG_TrxFilesFound" xml:space="preserve">
    <value>The following test results files were found: {0}</value>
  </data>
  <data name="TRX_WARN_CoverageAttachmentsNotFound" xml:space="preserve">
    <value>None of the attached coverage reports exist on disk</value>
  </data>
  <data name="TRX_WARN_InvalidConstructedCoveragePath" xml:space="preserve">
    <value>None of the following coverage attachments could be found: {0}. Trx file: {1}</value>
  </data>
  <data name="TRX_WARN_InvalidTrx" xml:space="preserve">
    <value>Located trx file is not a valid xml file. File: {0}. File load error: {1}</value>
  </data>
  <data name="WARN_XamlBuildDeprecated" xml:space="preserve">
    <value>** WARNING: Support for XAML builds is deprecated since version 4.1 and will be removed in version 5.0 of the Scanner for MSBuild **</value>
  </data>
</root>