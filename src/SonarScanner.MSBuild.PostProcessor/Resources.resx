<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyDescription" xml:space="preserve">
    <value>SonarScanner for .NET End Step</value>
  </data>
  <data name="ERROR_BuildUrisDontMatch" xml:space="preserve">
    <value>Inconsistent build environment settings: the build Uri in the analysis config file does not match the build uri from the environment variable.
Build Uri from environment: {0}
Build Uri from config: {1}
Analysis config file: {2}
Please delete the analysis config file and try the build again.</value>
  </data>
  <data name="ERROR_CmdLine_DisallowedArgument" xml:space="preserve">
    <value>This setting is not valid in the "end" phase in this version of the C# plugin: {0}</value>
  </data>
  <data name="ERROR_ConfigFileNotFound" xml:space="preserve">
    <value>The analysis could not be completed because the analysis configuration file could not be found.
Expected location: {0}</value>
  </data>
  <data name="ERROR_CredentialsNotSpecified" xml:space="preserve">
    <value>Credentials must be passed in both begin and end steps or not at all</value>
  </data>
  <data name="ERROR_TruststorePasswordNotSpecified" xml:space="preserve">
    <value>'sonar.scanner.truststorePassword' must be specified in the end step when specified during the begin step.</value>
  </data>
  <data name="ERR_ConflictingSonarProjectProperties" xml:space="preserve">
    <value>sonar-project.properties files are not understood by the SonarScanner for .NET. Remove those files from the following folders: {0}</value>
  </data>
  <data name="MSG_LoadingConfig" xml:space="preserve">
    <value>Loading the SonarQube analysis config from {0}</value>
  </data>
  <data name="MSG_UninstallTargets_CouldNotDelete" xml:space="preserve">
    <value>Could not delete {0}</value>
  </data>
  <data name="MSG_UninstallTargets_NotExists" xml:space="preserve">
    <value>{0} does not exist</value>
  </data>
  <data name="MSG_UninstallTargets_Uninstalling" xml:space="preserve">
    <value>Uninstalling target: {0}</value>
  </data>
  <data name="Report_CreatingSummaryMarkdown" xml:space="preserve">
    <value>Creating a summary markdown file...</value>
  </data>
  <data name="Report_MdSummaryAnalysisFailed" xml:space="preserve">
    <value>Analysis failed for SonarQube project {0}</value>
  </data>
  <data name="Report_MdSummaryAnalysisSucceeded" xml:space="preserve">
    <value>Analysis succeeded for SonarQube project {0} [Analysis results]({1})</value>
  </data>
  <data name="Report_MdSummaryInvalidSkippedAndExcludedMessage" xml:space="preserve">
    <value>- Invalid projects: {0}, skipped projects: {1}, excluded projects: {2}</value>
  </data>
  <data name="Report_MdSummaryProductAndTestMessage" xml:space="preserve">
    <value>- Product projects: {0}, test projects: {1}</value>
  </data>
  <data name="SETTINGS_InLegacyTeamBuild" xml:space="preserve">
    <value>Legacy TeamBuild environment detected</value>
  </data>
  <data name="SETTINGS_InTeamBuild" xml:space="preserve">
    <value>TeamBuild environment detected</value>
  </data>
  <data name="SETTINGS_NotInTeamBuild" xml:space="preserve">
    <value>Not running under TeamBuild</value>
  </data>
  <data name="SETTING_DumpSettings" xml:space="preserve">
    <value>Analysis base directory: {0}
Build directory: {1}
Bin directory: {2}
Config directory: {3}
Output directory: {4}
Config file: {5}</value>
  </data>
  <data name="WARN_CannotProcessCoverage" xml:space="preserve">
    <value>Cannot process the code coverage information. Look at the previous warnings for details.</value>
  </data>
  <data name="MSG_ConvertingCoverageReports" xml:space="preserve">
    <value>Converting coverage reports.</value>
  </data>
  <data name="MSG_TFSLegacyProcessorCalled" xml:space="preserve">
    <value>Calling legacy TFS processor.</value>
  </data>
</root>